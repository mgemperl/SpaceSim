#include "SpaceSim.h"
#include "GameException.h"

//=============================================================================
// Constructor
//=============================================================================
SpaceSim::SpaceSim()
{}

//=============================================================================
// Destructor
//=============================================================================
SpaceSim::~SpaceSim()
{
    ReleaseAll();           // call onLostDevice() for every graphics item
}

//=============================================================================
// Initializes the game
// Throws GameException on error
//=============================================================================
void SpaceSim::Initialize(HWND hwnd)
{
    Game::Initialize(hwnd); // throws GameException

	// Set up nebula texture
	if (!nebulaTexture.Initialize(m_pGraphics, "Textures/nebula_01.jpg"))
	{
		throw(GameException(GameExceptionNS::FATAL_ERROR,
			"Error initializing nebula texture"));
	}

	// Set up ship texture
	if (!shipTexture.Initialize(m_pGraphics, "Textures/planet_02_alpha.png"))
	{
		throw(GameException(GameExceptionNS::FATAL_ERROR,
			"Error initializing ship texture"));
	}

	// Set up nebula drawable
	if (!nebula.Initialize(m_pGraphics, 0, 0, 0, &nebulaTexture))
	{
		throw(GameException(GameExceptionNS::FATAL_ERROR,
			"Error initializing nebula"));
	}

	nebula.SetScale((float)min(GAME_WIDTH, GAME_HEIGHT) / (float)min(nebula.GetWidth(), nebula.GetHeight()));  

	// Set up ship drawable
	if (!ship.Initialize(m_pGraphics, 0, 0, 0, &shipTexture))
	{
		throw(GameException(GameExceptionNS::FATAL_ERROR,
			"Error initializing ship"));
	}

	ship.SetScale(0.25);
	ship.SetX(GAME_WIDTH * 0.5f - ship.GetWidth() * 0.5f * ship.GetScale());
	ship.SetY(GAME_HEIGHT * 0.5f - ship.GetHeight() * 0.5f * ship.GetScale());
}

//=============================================================================
// Update all game items
//=============================================================================
void SpaceSim::Update(float delta)
{}

//=============================================================================
// Update all physics
//=============================================================================
void SpaceSim::ConstUpdate()
{}


//=============================================================================
// Render game items
//=============================================================================
void SpaceSim::Render(float interpolation)
{
	m_pGraphics->SpriteBegin();
	nebula.Draw();
	ship.Draw();
	m_pGraphics->SpriteEnd();

}

//=============================================================================
// The graphics device was lost.
// Release all reserved video memory so graphics device may be reset.
//=============================================================================
void SpaceSim::ReleaseAll()
{
    Game::ReleaseAll();
	shipTexture.OnLostDevice();
	nebulaTexture.OnLostDevice();
	Game::ReleaseAll();
}

//=============================================================================
// The grahics device has been reset.
// Recreate all surfaces.
//=============================================================================
void SpaceSim::ResetAll()
{
    Game::ResetAll();
	nebulaTexture.OnResetDevice();
	shipTexture.OnResetDevice();
	Game::ResetAll();
}
